{"version":3,"sources":["logo.svg","components/Home/home.js","components/Mens/mens.js","components/Womens/womens.js","components/Kids/kids.js","components/Navbar/navigator.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Home","React","Component","Men","Women","Kid","Navigator","document","getElementById","style","width","display","Fragment","className","aria-hidden","id","class","href","onClick","this","closeNav","to","openNav","path","component","exactpath","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uJAAAA,EAAOC,QAAU,IAA0B,kC,qLCGtBC,E,uKAGb,OACA,yC,GAJ0BC,IAAMC,WCAnBC,E,uKAGb,OACA,iD,GAJyBF,IAAMC,WCAlBE,E,uKAGb,OACA,mD,GAJ2BH,IAAMC,WCApBG,E,uKAGb,OACA,iD,GAJyBJ,IAAMC,WCOlBI,G,8KAEjBC,SAASC,eAAe,aAAaC,MAAMC,MAAQ,QACnDH,SAASC,eAAe,eAAeC,MAAME,QAAU,Y,iCAGvDJ,SAASC,eAAe,aAAaC,MAAMC,MAAQ,M,+BAGjD,OACE,kBAAC,IAAD,KACE,kBAAC,IAAME,SAAP,KACA,4BAAQC,UAAU,cAChB,yBAAKA,UAAU,QAAf,cACA,yBAAKA,UAAU,aACf,uBAAGA,UAAU,aAAaC,cAAY,UAEtC,yBAAKC,GAAG,YAAYC,MAAM,WAC1B,uBAAGC,KAAK,qBAAqBJ,UAAU,WAAWK,QAASC,KAAKC,UAAhE,QACA,wBAAIL,GAAG,eACL,4BAAI,kBAAC,IAAD,CAAMM,GAAI,KAAV,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAI,SAAV,SACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAI,WAAV,WACJ,4BAAI,kBAAC,IAAD,CAAMA,GAAI,SAAV,WAGN,0BAAMR,UAAU,UAAUK,QAASC,KAAKG,SAAxC,WAEF,6BACE,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWrB,IAC/B,kBAAC,IAAD,CAAOoB,KAAK,UAAUC,UAAWpB,IACjC,kBAAC,IAAD,CAAOmB,KAAK,QAAQC,UAAWnB,IAC/B,kBAAC,IAAD,CAAOoB,UAAU,IAAID,UAAWxB,Y,GAjCLC,IAAMC,YCK9BwB,MARf,WACE,OACE,yBAAKb,UAAU,OACZ,kBAAC,EAAD,QCEac,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEF3B,SAASC,eAAe,SDyHpB,kBAAmB2B,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.eef856d4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\n\r\n\r\nexport default class Home extends React.Component {\r\n   \r\n    render() {\r\n        return(\r\n        <div>Home</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default class Men extends React.Component {\r\n   \r\n    render() {\r\n        return(\r\n        <div>Mens Section</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default class Women extends React.Component {\r\n   \r\n    render() {\r\n        return(\r\n        <div>Womens section</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\n\r\n\r\nexport default class Kid extends React.Component {\r\n   \r\n    render() {\r\n        return(\r\n        <div>Kids Section</div>\r\n        )\r\n    }\r\n}","import React from 'react';\r\nimport { BrowserRouter as Router, Route , Link , Switch} from 'react-router-dom';\r\nimport Home from '.././Home/home';\r\nimport Men from '.././Mens/mens';\r\nimport Women from '.././Womens/womens';\r\nimport Kid from '.././Kids/kids';\r\nimport './navigator.css';\r\n\r\n\r\n\r\nexport default class Navigator extends React.Component {\r\n   openNav(){\r\n    document.getElementById(\"mySidenav\").style.width = \"250px\";\r\n    document.getElementById(\"desktopMenu\").style.display = \"inherit\";\r\n   }\r\n   closeNav(){\r\n    document.getElementById(\"mySidenav\").style.width = \"0\";\r\n   }\r\n    render() {\r\n      return (\r\n        <Router>\r\n          <React.Fragment>\r\n          <header className=\"App-header\">\r\n            <div className=\"logo\">E-commerce</div>\r\n            <div className=\"nav-icon1\">\r\n            <i className=\"fa fa-bars\" aria-hidden=\"true\"></i>\r\n            </div>\r\n            <div id=\"mySidenav\" class=\"sidenav\">\r\n            <a href=\"javascript:void(0)\" className=\"closebtn\" onClick={this.closeNav}>&times;</a>\r\n            <ul id=\"desktopMenu\">\r\n              <li><Link to={'/'}>Home</Link></li>\r\n              <li><Link to={'/Mens'}>Mens</Link></li>\r\n              <li><Link to={'/Womens'}>Womens</Link></li>\r\n              <li><Link to={'/Kids'}>Kids</Link></li>\r\n            </ul>\r\n            </div>\r\n            <span className=\"menubar\" onClick={this.openNav}>&#9776;</span>\r\n          </header>\r\n          <div>\r\n            <Switch>  \r\n            <Route path='/Mens' component={Men}/>\r\n            <Route path='/Womens' component={Women}/>\r\n            <Route path='/Kids' component={Kid}/>\r\n            <Route exactpath='/' component={Home}/>\r\n            </Switch>\r\n          </div>\r\n          </React.Fragment>\r\n        </Router>\r\n      \r\n      \r\n      \r\n      )\r\n    }\r\n  }","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Navigator from './components/Navbar/navigator.js';\n\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n       <Navigator></Navigator>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}